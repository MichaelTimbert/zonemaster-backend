#!/usr/bin/env perl

use 5.14.2;
use warnings;

use Zonemaster::Backend::TestAgent;
use Zonemaster::Backend::Config;

use Parallel::ForkManager;
use Daemon::Control;

use Time::HiRes qw[time sleep];
use Getopt::Long;

###
### Compile-time stuff.
###

BEGIN {
	$ENV{PERL_JSON_BACKEND} = 'JSON::PP';
}

# Enable immediate flush to stdout and stderr
$|++;

###
### More global variables, and initialization.
###

my $pidfile;
my $user;
my $group;
GetOptions(
    'pidfile=s' => \$pidfile,
    'user=s' => \$user,
    'group=s' => \$group,
);
$pidfile //= '/tmp/zonemaster_backend_testagent.pid';

# Yes, the method names are spelled like that.
my $config = Zonemaster::Backend::Config->load_config();
my $maximum_processes = 
  $config->NumberOfProcessesForFrontendTesting() +
  $config->NumberOfProcessesForBatchTesting();

my $delay   = $config->PollingInterval();
my $timeout = $config->MaxZonemasterExecutionTime();

my $pm = Parallel::ForkManager->new( $maximum_processes );
$pm->set_waitpid_blocking_sleep( 0 ) if $pm->can('set_waitpid_blocking_sleep');

my %times;

###
### Actual functionality
###

$pm->run_on_wait(
    sub {
        foreach my $pid ( $pm->running_procs ) {
            my $diff = time() - $times{$pid};

            if ( $diff > $timeout ) {
                kill 9, $pid;
            }
        }
    },
    1
);

$pm->run_on_start(
    sub {
        my ( $pid, $id ) = @_;

        $times{$pid} = time();
    }
);

$pm->run_on_finish(
    sub {
        my ( $pid, $exitcode, $id ) = @_;

        delete $times{$pid};
    }
);

sub main {
    my $self = shift;

    my $db = $self->config->{db};
    
    # Atempt a creation of a dummy instance of a TestAgent to catch possible Zonemaster-Engine profile files misconfigurations early
    Zonemaster::Backend::TestAgent->new({ config => $config });

    while ( 1 ) {
        my $id = $db->get_test_request();

        if ( $id ) {
            $pm->wait_for_available_procs();
            if ( $pm->start( $id ) == 0 ) {    # Child process
                Zonemaster::Backend::TestAgent->new({ config => $config })->run( $id );
                $pm->finish;
            }
        }
        else {
            sleep $delay;
        }
    }
}

###
### Daemon Control stuff.
###

my $daemon = Daemon::Control->with_plugins(qw( +Zonemaster::Backend::Config::DCPlugin ))->new({
    name     => 'zonemaster-testagent',
    program  => \&main,
    pid_file => $pidfile,
});

$daemon->init_config( $ENV{PERLBREW_ROOT} . '/etc/bashrc' ) if ( $ENV{PERLBREW_ROOT} );
$daemon->user($user) if $user;
$daemon->group($group) if $group;

exit $daemon->run;
