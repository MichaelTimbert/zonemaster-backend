#!/usr/bin/env perl

use 5.14.2;
use warnings;

use Zonemaster::Backend::TestAgent;
use Zonemaster::Backend::Config;

use Parallel::ForkManager;
use Daemon::Control;
use Log::Any qw( $log );
use Log::Any::Adapter;
use Log::Dispatch;

use English;
use Getopt::Long;
use POSIX;
use Time::HiRes qw[time sleep];
use sigtrap qw(die normal-signals);

###
### Compile-time stuff.
###

BEGIN {
	$ENV{PERL_JSON_BACKEND} = 'JSON::PP';
}

###
### More global variables, and initialization.
###

my $pidfile;
my $user;
my $group;
my $logfile;
my $loglevel;
GetOptions(
    'pidfile=s' => \$pidfile,
    'user=s' => \$user,
    'group=s' => \$group,
    'logfile=s' => \$logfile,
    'loglevel=s' => \$loglevel,
);
$pidfile //= '/tmp/zonemaster_backend_testagent.pid';
$logfile //= '/var/log/zonemaster/zonemaster_backend_testagent.log';
$loglevel //= 'info';
$loglevel = lc $loglevel;

$loglevel =~ /^(?:trace|debug|info|inform|notice|warning|warn|error|err|critical|crit|fatal|alert|emergency)$/ or die "Error: Unrecognized --loglevel $loglevel\n";

print STDERR "Logging to $logfile\n";

{
    my $dispatcher = Log::Dispatch->new(outputs => [
        [
            'File',
            min_level => $loglevel,
            filename => $logfile,
            mode => '>>',
            callbacks => sub {
                my %args = @_;
                $args{message} = sprintf "%s [%d] %s - %s\n", strftime("%FT%TZ", gmtime), $PID, uc $args{level}, $args{message};
            },
        ]
    ]);
    Log::Any::Adapter->set( 'Dispatch', dispatcher => $dispatcher );
}

# Yes, the method names are spelled like that.
my $maximum_processes =
  Zonemaster::Backend::Config->NumberOfProcessesForFrontendTesting() +
  Zonemaster::Backend::Config->NumberOfProcessesForBatchTesting();

my $delay   = Zonemaster::Backend::Config->PollingInterval();
my $timeout = Zonemaster::Backend::Config->MaxZonemasterExecutionTime();

my $pm = Parallel::ForkManager->new( $maximum_processes );
$pm->set_waitpid_blocking_sleep( 0 ) if $pm->can('set_waitpid_blocking_sleep');

my %times;

###
### Actual functionality
###

$pm->run_on_wait(
    sub {
        foreach my $pid ( $pm->running_procs ) {
            my $diff = time() - $times{$pid};

            if ( $diff > $timeout ) {
                kill 9, $pid;
            }
        }
    },
    1
);

$pm->run_on_start(
    sub {
        my ( $pid, $id ) = @_;

        $times{$pid} = time();
    }
);

$pm->run_on_finish(
    sub {
        my ( $pid, $exitcode, $id ) = @_;

        delete $times{$pid};
    }
);

sub main {
    my $self = shift;

    my $db = $self->config->{db};

    while ( 1 ) {
        my $id = $db->get_test_request();

        if ( $id ) {
            $log->info("Test found: $id");
            $pm->wait_for_available_procs();
            if ( $pm->start( $id ) == 0 ) {    # Child process
                $log->info("Test starting: $id");
                Zonemaster::Backend::TestAgent->new->run( $id );
                $log->info("Test completed: $id");
                $pm->finish;
            }
        }
        else {
            sleep $delay;
        }
    }
}

###
### Daemon Control stuff.
###

my $daemon = Daemon::Control->with_plugins( qw( +Zonemaster::Backend::Config::DCPlugin ) )->new(
    {
        name    => 'zonemaster-testagent',
        program => sub {
            my $self = shift;
            $log->notice( "Daemon spawned" );
            eval { main( $self ) };
            if ( $@ ) {
                chomp $@;
                $log->critical( $@ );
            }
            $log->notice( "Daemon terminating" );
        },
        pid_file => $pidfile,
    }
);

$daemon->init_config( $ENV{PERLBREW_ROOT} . '/etc/bashrc' ) if ( $ENV{PERLBREW_ROOT} );
$daemon->user($user) if $user;
$daemon->group($group) if $group;

exit $daemon->run;
