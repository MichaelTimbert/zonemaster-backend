#!/usr/bin/env perl
use strict;
use warnings;
use feature 'say';

use Getopt::Long qw( GetOptionsFromArray :config require_order );

use Pod::Usage;

use JSON::PP;
use LWP::UserAgent;

=head1 NAME

B<zmb> - Shell bindings for the Zonemaster::Backend RPC API

Zmb is meant to be pronounced I<Zimba>.

=head1 SYNOPSIS

zmb [GLOBAL OPTIONS] COMMAND [OPTIONS]

This interface is unstable and will change in a future release.

=head1 GLOBAL OPTIONS

 --help         Show usage
 --verbose      Show RPC query
 --server URL   The server to connect to. Default is http://localhost:5000/.

=cut

sub main {
    my @argv = @_;

    my $opt_help;
    my $opt_verbose;
    my $opt_server = 'http://localhost:5000/';
    GetOptionsFromArray(
        \@argv,
        'help'     => \$opt_help,
        'verbose'  => \$opt_verbose,
        'server=s' => \$opt_server,
    ) or pod2usage( 2 );
    if ( !@argv ) {
        pod2usage( -verbose => 99, -sections => ['SYNOPSIS', 'GLOBAL OPTIONS'], -exitval => 'NOEXIT' );
        show_commands();
        exit 1;
    }
    my $cmd = shift @argv;
    pod2usage( 1 ) if !defined $cmd;
    my $cmd_sub = \&{ "cmd_" . $cmd };
    pod2usage( "'$cmd' is not a command" ) if !defined &$cmd_sub;
    pod2usage( -verbose => 99, -sections => ["COMMANDS/$cmd"] ) if $opt_help;

    my $json = &$cmd_sub( @argv );

    if ( $json ) {
        say $json if $opt_verbose;
        my $request  = to_request( $opt_server, $json );
        my $response = submit( $request );
        say $response;
    }
}


=head1 COMMANDS

=head2 man

Show the full manual page.

 zmb [GLOBAL OPTIONS] man

=cut

sub cmd_man {
    pod2usage( -verbose => 2 );
}


=head2 non_existing_method

Call a non-existing RPC method.

 zmb [GLOBAL OPTIONS] non_existing_method

=cut

sub cmd_non_existing_method {
    return to_jsonrpc(
        id     => 1,
        method => 'non_existing_method',
    );
}


=head2 system_versions

 zmb [GLOBAL OPTIONS] system_versions

=cut

sub cmd_system_versions {
    return to_jsonrpc(
        id     => 1,
        method => 'system_versions',
    );
}


=head2 conf_profiles

 zmb [GLOBAL OPTIONS] conf_profiles

=cut

sub cmd_conf_profiles {
    return to_jsonrpc(
        id     => 1,
        method => 'conf_profiles',
    );
}


=head2 conf_languages

 zmb [GLOBAL OPTIONS] conf_languages

=cut

sub cmd_conf_languages {
    return to_jsonrpc(
        id     => 1,
        method => 'conf_languages',
    );
}


=head2 job_create

 zmb [GLOBAL OPTIONS] job_create [OPTIONS]

 Options:

    --domain DOMAIN_NAME
    --ipv4 true|false|null
    --ipv6 true|false|null
    --nameserver DOMAIN_NAME:IP_ADDRESS
    --nameserver DOMAIN_NAME  # Trailing colon is optional when not specifing IP_ADDRESS
    --ds-info DS_INFO
    --client-id CLIENT_ID
    --client-version CLIENT_VERSION
    --profile PROFILE_NAME
    --queue QUEUE
    --language LANGUAGE

 DS_INFO is a comma separated list of key-value pairs. The expected pairs are:

    keytag=NON_NEGATIVE_INTEGER
    algorithm=NON_NEGATIVE_INTEGER
    digtype=NON_NEGATIVE_INTEGER
    digest=HEX_STRING

=cut

sub cmd_job_create {
    my @opts = @_;

    my @opt_nameserver;
    my $opt_domain;
    my $opt_client_id;
    my $opt_client_version;
    my @opt_ds_info;
    my $opt_ipv4;
    my $opt_ipv6;
    my $opt_profile;
    my $opt_queue;
    my $opt_language;
    GetOptionsFromArray(
        \@opts,
        'domain|d=s'       => \$opt_domain,
        'nameserver|n=s'   => \@opt_nameserver,
        'client-id=s'      => \$opt_client_id,
        'client-version=s' => \$opt_client_version,
        'ds-info=s'        => \@opt_ds_info,
        'ipv4=s'           => \$opt_ipv4,
        'ipv6=s'           => \$opt_ipv6,
        'profile=s'        => \$opt_profile,
        'queue=s'          => \$opt_queue,
        'language=s'       => \$opt_language,
    ) or pod2usage( 2 );

    my %params = ( domain => $opt_domain, );

    if ( $opt_client_id ) {
        $params{client_id} = $opt_client_id;
    }

    if ( $opt_client_version ) {
        $params{client_version} = $opt_client_version;
    }

    if ( @opt_ds_info ) {
        my @info_objects;
        for my $property_value_pairs ( @opt_ds_info ) {
            my %info_object;
            for my $pair ( split /,/, $property_value_pairs ) {
                my ( $property, $value ) = split /=/, $pair;
                if ( $property =~ /^(?:keytag|algorithm|digtype)$/ ) {
                    $value = 0 + $value;
                }
                $info_object{$property} = $value;
            }
            push @info_objects, \%info_object;
        }
        $params{ds_info} = \@info_objects;
    }

    if ( @opt_nameserver ) {
        my @nameserver_objects;
        for my $domain_ip_pair ( @opt_nameserver ) {
            my ( $domain, $ip ) = split /:/, $domain_ip_pair, 2;
            if ($ip) {
                push @nameserver_objects, { ns => $domain, ip => $ip };
            } else {
                push @nameserver_objects, { ns => $domain };
            }
        }
        $params{nameservers} = \@nameserver_objects;
    }

    if ( $opt_ipv4 ) {
        $params{ipv4} = json_tern( $opt_ipv4 );
    }

    if ( $opt_ipv6 ) {
        $params{ipv6} = json_tern( $opt_ipv6 );
    }

    if ( $opt_profile ) {
        $params{profile} = $opt_profile;
    }

    if ( $opt_queue ) {
        $params{queue} = $opt_queue;
    }

    if ( $opt_language ) {
        $params{language} = $opt_language;
    }

    return to_jsonrpc(
        id     => 1,
        method => 'job_create',
        params => \%params,
    );
}




=head2 job_status

 zmb [GLOBAL OPTIONS] job_status [OPTIONS]

 Options:
   --test-id TEST_ID

=cut

sub cmd_job_status {
    my @opts = @_;

    my $opt_test_id;
    GetOptionsFromArray(
        \@opts,
        'test-id|t=s' => \$opt_test_id,
    ) or pod2usage( 2 );

    return to_jsonrpc(
        id     => 1,
        method => 'job_status',
        params => {
            test_id => $opt_test_id,
        },
    );
}


=head2 job_params

 zmb [GLOBAL OPTIONS] job_params [OPTIONS]

 Options:
   --test-id TEST_ID

=cut

sub cmd_job_params {
    my @opts = @_;

    my $opt_test_id;
    GetOptionsFromArray(    #
        \@opts,
        'test-id|t=s' => \$opt_test_id,
    ) or pod2usage( 2 );

    return to_jsonrpc(
        id     => 1,
        method => 'job_params',
        params => {
            test_id => $opt_test_id,
        },
    );
}


=head2 job_results

 zmb [GLOBAL OPTIONS] job_results [OPTIONS]

 Options:
   --test-id TEST_ID
   --lang LANGUAGE

=cut

sub cmd_job_results {
    my @opts = @_;

    my $opt_lang;
    my $opt_test_id;
    GetOptionsFromArray(
        \@opts,
        'test-id|t=s' => \$opt_test_id,
        'lang|l=s'    => \$opt_lang,
    ) or pod2usage( 2 );

    return to_jsonrpc(
        id     => 1,
        method => 'job_results',
        params => {
            id       => $opt_test_id,
            language => $opt_lang,
        },
    );
}


=head2 domain_history

 zmb [GLOBAL OPTIONS] domain_history [OPTIONS]

 Options:
   --domain DOMAIN_NAME
   --filter all|delegated|undelegated
   --offset COUNT
   --limit COUNT

=cut

sub cmd_domain_history {
    my @opts = @_;
    my $opt_filter;
    my $opt_domain;
    my $opt_offset;
    my $opt_limit;

    GetOptionsFromArray(
        \@opts,
        'domain|d=s'     => \$opt_domain,
        'filter|n=s'     => \$opt_filter,
        'offset|o=i'     => \$opt_offset,
        'limit|l=i'      => \$opt_limit,
    ) or pod2usage( 2 );

    my %params = (
        frontend_params => {
            domain => $opt_domain,
        },
    );

    if ( $opt_filter ) {
        unless ( $opt_filter =~ /^(?:all|delegated|undelegated)$/ ) {
            die 'Illegal filter value. Expects "all", "delegated" or "undelegated" ';
        }
        $params{filter} = $opt_filter;
    }

    if ( defined $opt_offset ) {
        $params{offset} = $opt_offset;
    }

    if ( defined $opt_limit ) {
        $params{limit} = $opt_limit;
    }

    return to_jsonrpc(
        id     => 1,
        method => 'domain_history',
        params => \%params,
    );
}


=head2 user_create

 zmb [GLOBAL OPTIONS] user_create [OPTIONS]

 Options:
   --username USERNAME
   --api-key API_KEY

=cut

sub cmd_user_create {
    my @opts = @_;

    my $opt_username;
    my $opt_api_key;
    GetOptionsFromArray(
        \@opts,
        'username|u=s' => \$opt_username,
        'api-key|a=s'  => \$opt_api_key,
    ) or pod2usage( 2 );

    return to_jsonrpc(
        id     => 1,
        method => 'user_create',
        params => {
            username => $opt_username,
            api_key  => $opt_api_key,
        },
    );
}


=head2 batch_create

 zmb [GLOBAL OPTIONS] batch_create [OPTIONS]

 Options:
    --username USERNAME
    --api-key API_KEY
    --domain DOMAIN_NAME
    --ipv4 true|false|null
    --ipv6 true|false|null
    --nameserver DOMAIN_NAME:IP_ADDRESS
    --nameserver DOMAIN_NAME  # Trailing colon is optional when not specifing IP_ADDRESS
    --ds-info DS_INFO
    --client-id CLIENT_ID
    --client-version CLIENT_VERSION
    --profile PROFILE_NAME
    --queue QUEUE

 "--domain" is repeated for each domain to be tested.
 "--nameserver" can be repeated for each name server.
 "--ds-info" can be repeated for each DS record.

 DS_INFO is a comma separated list of key-value pairs. The expected pairs are:

    keytag=NON_NEGATIVE_INTEGER
    algorithm=NON_NEGATIVE_INTEGER
    digtype=NON_NEGATIVE_INTEGER
    digest=HEX_STRING

=cut

sub cmd_batch_create {
    my @opts = @_;

    my $opt_username;
    my $opt_api_key;
    my @opt_nameserver;
    my @opt_domains;
    my $opt_client_id;
    my $opt_client_version;
    my @opt_ds_info;
    my $opt_ipv4;
    my $opt_ipv6;
    my $opt_profile;
    my $opt_queue;
    GetOptionsFromArray(
        \@opts,
        'username|u=s'     => \$opt_username,
        'api-key|a=s'      => \$opt_api_key,
        'domain|d=s'       => \@opt_domains,
        'nameserver|n=s'   => \@opt_nameserver,
        'client-id=s'      => \$opt_client_id,
        'client-version=s' => \$opt_client_version,
        'ds-info=s'        => \@opt_ds_info,
        'ipv4=s'           => \$opt_ipv4,
        'ipv6=s'           => \$opt_ipv6,
        'profile=s'        => \$opt_profile,
        'queue=s'          => \$opt_queue,
    ) or pod2usage( 2 );


    my %params = ( domains => \@opt_domains );

    $params{username} = $opt_username;
    $params{api_key} = $opt_api_key;

    if ( $opt_client_id ) {
        $params{test_params}{client_id} = $opt_client_id;
    }

    if ( $opt_client_version ) {
        $params{test_params}{client_version} = $opt_client_version;
    }

    if ( @opt_ds_info ) {
        my @info_objects;
        for my $property_value_pairs ( @opt_ds_info ) {
            my %info_object;
            for my $pair ( split /,/, $property_value_pairs ) {
                my ( $property, $value ) = split /=/, $pair;
                if ( $property =~ /^(?:keytag|algorithm|digtype)$/ ) {
                    $value = 0 + $value;
                }
                $info_object{$property} = $value;
            }
            push @info_objects, \%info_object;
        }
        $params{test_params}{ds_info} = \@info_objects;
    }

    if ( @opt_nameserver ) {
        my @nameserver_objects;
        for my $domain_ip_pair ( @opt_nameserver ) {
            my ( $domain, $ip ) = split /:/, $domain_ip_pair, 2;
            $ip //= "";
            push @nameserver_objects,
              {
                ns => $domain,
                ip => $ip,
              };
        }
        $params{test_params}{nameservers} = \@nameserver_objects;
    }

    if ( $opt_ipv4 ) {
        $params{test_params}{ipv4} = json_tern( $opt_ipv4 );
    }

    if ( $opt_ipv6 ) {
        $params{test_params}{ipv6} = json_tern( $opt_ipv6 );
    }

    if ( $opt_profile ) {
        $params{test_params}{profile} = $opt_profile;
    }

    if ( $opt_queue ) {
        $params{test_params}{queue} = $opt_queue;
    }

    return to_jsonrpc(
        id     => 1,
        method => 'batch_create',
        params => \%params,
    );
}


=head2 batch_status

 zmb [GLOBAL OPTIONS] batch_status [OPTIONS]

 Options:
   --batch-id BATCH-ID

=cut

sub cmd_batch_status {
    my @opts = @_;

    my $opt_batch_id;
    GetOptionsFromArray(
        \@opts,
        'batch-id|i=s' => \$opt_batch_id,
    ) or pod2usage( 2 );

    return to_jsonrpc(
        id     => 1,
        method => 'batch_status',
        params => {
            batch_id => $opt_batch_id,
        },
    );
}


sub show_commands {
    my %specials = (
        man                 => 'Show the full manual page.',
        non_existing_method => 'Call a non-existing RPC method.',
    );
    my @commands  = get_commands();
    my $max_width = 0;
    for my $command ( @commands ) {
        $max_width = length $command if length $command > $max_width;
    }
    say "Commands:";
    for my $command ( @commands ) {
        if ( exists $specials{$command} ) {
            printf "     %-*s     %s\n", $max_width, $command, $specials{$command};
        }
        else {
            say "     ", $command;
        }
    }
}


sub get_commands {
    no strict 'refs';

    return sort
      map { $_ =~ s/^cmd_//r }
      grep { $_ =~ /^cmd_/ } grep { defined &{"main\::$_"} } keys %{"main\::"};
}

sub json_tern {
    my $value = shift;
    if ( $value eq 'true' ) {
        return JSON::PP::true;
    }
    elsif ( $value eq 'false' ) {
        return JSON::PP::false;
    }
    elsif ( $value eq 'null' ) {
        return undef;
    }
    else {
        die 'Illegal value. Expects "true", "false" or "null" ';
    }
}

sub to_jsonrpc {
    my %args   = @_;
    my $id     = $args{id};
    my $method = $args{method};

    my $request = {
        jsonrpc => "2.0",
        method  => $method,
        id      => $id,
    };
    if ( exists $args{params} ) {
        $request->{params} = $args{params};
    }
    return encode_json( $request );
}

sub to_request {
    my $server = shift;
    my $json   = shift;

    my $req = HTTP::Request->new( POST => $server );
    $req->content_type( 'application/json' );
    $req->content( $json );

    return $req;
}

sub submit {
    my $req = shift;

    my $ua  = LWP::UserAgent->new;
    my $res = $ua->request( $req );

    if ( $res->is_success ) {
        return $res->decoded_content;
    }
    else {
        die $res->status_line;
    }
}

main( @ARGV );
